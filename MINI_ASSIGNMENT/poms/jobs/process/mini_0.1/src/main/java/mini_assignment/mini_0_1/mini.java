// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package mini_assignment.mini_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: mini Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class mini implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (source != null) {

				this.setProperty("source", source.toString());

			}

			if (stage != null) {

				this.setProperty("stage", stage.toString());

			}

			if (target != null) {

				this.setProperty("target", target.toString());

			}

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String stage;

		public String getStage() {
			return this.stage;
		}

		public String target;

		public String getTarget() {
			return this.target;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "mini";
	private final String projectName = "MINI_ASSIGNMENT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					mini.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(mini.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tContextLoad_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT_mini = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT_mini = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT_mini.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT_mini.length == 0) {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT_mini, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT_mini, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT_mini.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT_mini.length == 0) {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT_mini, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT_mini, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT_mini) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT_mini) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT_mini = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT_mini = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT_mini.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT_mini.length == 0) {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT_mini, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT_mini, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT_mini.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT_mini.length == 0) {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT_mini, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT_mini, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT_mini) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT_mini) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row1Struct row2 = row1;

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[0];

					public void addRow(String[] row) {

						for (int i = 0; i < 0; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(new String[] {});
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tContextLoad_1 begin ] start
				 */

				ok_Hash.put("tContextLoad_1", false);
				start_Hash.put("tContextLoad_1", System.currentTimeMillis());

				currentComponent = "tContextLoad_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tContextLoad_1 = 0;

				java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
				int nb_line_tContextLoad_1 = 0;

				/**
				 * [tContextLoad_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "C:/Users/reemasharma/Downloads/etl/config.properties";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/reemasharma/Downloads/etl/config.properties", "ISO-8859-15", "=", "\n", true,
								0, 0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row1.key = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.value = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tContextLoad_1 main ] start
							 */

							currentComponent = "tContextLoad_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row1"

								);
							}

							//////////////////////////
							String tmp_key_tContextLoad_1 = null;
							String key_tContextLoad_1 = null;
							if (row1.key != null) {
								tmp_key_tContextLoad_1 = row1.key.trim();
								if ((tmp_key_tContextLoad_1.startsWith("#")
										|| tmp_key_tContextLoad_1.startsWith("!"))) {
									tmp_key_tContextLoad_1 = null;
								} else {
									row1.key = tmp_key_tContextLoad_1;
								}
							}
							if (row1.key != null) {
								key_tContextLoad_1 = row1.key;
							}
							String value_tContextLoad_1 = null;
							if (row1.value != null) {
								value_tContextLoad_1 = row1.value;
							}

							String currentValue_tContextLoad_1 = value_tContextLoad_1;

							if (tmp_key_tContextLoad_1 != null) {
								try {
									if (key_tContextLoad_1 != null && "source".equals(key_tContextLoad_1)) {
										context.source = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "stage".equals(key_tContextLoad_1)) {
										context.stage = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "target".equals(key_tContextLoad_1)) {
										context.target = value_tContextLoad_1;
									}

									if (context.getProperty(key_tContextLoad_1) != null) {
										assignList_tContextLoad_1.add(key_tContextLoad_1);
									} else {
										newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
									}
									if (value_tContextLoad_1 == null) {
										context.setProperty(key_tContextLoad_1, "");
									} else {
										context.setProperty(key_tContextLoad_1, value_tContextLoad_1);
									}
								} catch (java.lang.Exception e) {
									globalMap.put("tContextLoad_1_ERROR_MESSAGE", e.getMessage());
									System.err.println("Setting a value for the key \"" + key_tContextLoad_1
											+ "\" has failed. Error message: " + e.getMessage());
								}
								nb_line_tContextLoad_1++;
							}
							//////////////////////////

							row2 = row1;

							tos_count_tContextLoad_1++;

							/**
							 * [tContextLoad_1 main ] stop
							 */

							/**
							 * [tContextLoad_1 process_data_begin ] start
							 */

							currentComponent = "tContextLoad_1";

							/**
							 * [tContextLoad_1 process_data_begin ] stop
							 */

							/**
							 * [tLogRow_1 main ] start
							 */

							currentComponent = "tLogRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row2"

								);
							}

///////////////////////		

							String[] row_tLogRow_1 = new String[0];

							util_tLogRow_1.addRow(row_tLogRow_1);
							nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

							tos_count_tLogRow_1++;

							/**
							 * [tLogRow_1 main ] stop
							 */

							/**
							 * [tLogRow_1 process_data_begin ] start
							 */

							currentComponent = "tLogRow_1";

							/**
							 * [tLogRow_1 process_data_begin ] stop
							 */

							/**
							 * [tLogRow_1 process_data_end ] start
							 */

							currentComponent = "tLogRow_1";

							/**
							 * [tLogRow_1 process_data_end ] stop
							 */

							/**
							 * [tContextLoad_1 process_data_end ] start
							 */

							currentComponent = "tContextLoad_1";

							/**
							 * [tContextLoad_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/Users/reemasharma/Downloads/etl/config.properties") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tContextLoad_1 end ] start
				 */

				currentComponent = "tContextLoad_1";

				java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
				while (enu_tContextLoad_1.hasMoreElements()) {
					String key_tContextLoad_1 = (String) enu_tContextLoad_1.nextElement();
					if (!assignList_tContextLoad_1.contains(key_tContextLoad_1)
							&& !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1)) {
						noAssignList_tContextLoad_1.add(key_tContextLoad_1);
					}
				}

				String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
				String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1,
						newPropertyStr_tContextLoad_1.length() - 1);

				String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
				String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1,
						noAssignStr_tContextLoad_1.length() - 1);

				globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
				globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

				globalMap.put("tContextLoad_1_NB_LINE", nb_line_tContextLoad_1);

				List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();

				resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "", "", "",
						"", resumeUtil.convertToJsonText(context, parametersToEncrypt_tContextLoad_1));

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tContextLoad_1", true);
				end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				/**
				 * [tContextLoad_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputDelimited_3Process(globalMap);

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tContextLoad_1 finally ] start
				 */

				currentComponent = "tContextLoad_1";

				/**
				 * [tContextLoad_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT_mini = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT_mini = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String SalesChannel;

		public String getSalesChannel() {
			return this.SalesChannel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public String Order_Date;

		public String getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_Id;

		public Integer getOrder_Id() {
			return this.Order_Id;
		}

		public String Ship_Date;

		public String getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public Integer Order_Year;

		public Integer getOrder_Year() {
			return this.Order_Year;
		}

		public Float Total_Revenue;

		public Float getTotal_Revenue() {
			return this.Total_Revenue;
		}

		public Float Total_Cost;

		public Float getTotal_Cost() {
			return this.Total_Cost;
		}

		public Float Total_Price;

		public Float getTotal_Price() {
			return this.Total_Price;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT_mini.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT_mini.length == 0) {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT_mini, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT_mini, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT_mini.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT_mini.length == 0) {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT_mini, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT_mini, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT_mini) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.SalesChannel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readString(dis);

					this.Order_Id = readInteger(dis);

					this.Ship_Date = readString(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Order_Year = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Total_Revenue = null;
					} else {
						this.Total_Revenue = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Total_Cost = null;
					} else {
						this.Total_Cost = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Total_Price = null;
					} else {
						this.Total_Price = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT_mini) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.SalesChannel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readString(dis);

					this.Order_Id = readInteger(dis);

					this.Ship_Date = readString(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Order_Year = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Total_Revenue = null;
					} else {
						this.Total_Revenue = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Total_Cost = null;
					} else {
						this.Total_Cost = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Total_Price = null;
					} else {
						this.Total_Price = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.SalesChannel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// String

				writeString(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_Id, dos);

				// String

				writeString(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// Integer

				writeInteger(this.Order_Year, dos);

				// Float

				if (this.Total_Revenue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Total_Revenue);
				}

				// Float

				if (this.Total_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Total_Cost);
				}

				// Float

				if (this.Total_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Total_Price);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.SalesChannel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// String

				writeString(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_Id, dos);

				// String

				writeString(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// Integer

				writeInteger(this.Order_Year, dos);

				// Float

				if (this.Total_Revenue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Total_Revenue);
				}

				// Float

				if (this.Total_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Total_Cost);
				}

				// Float

				if (this.Total_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Total_Price);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",SalesChannel=" + SalesChannel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + Order_Date);
			sb.append(",Order_Id=" + String.valueOf(Order_Id));
			sb.append(",Ship_Date=" + Ship_Date);
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Order_Year=" + String.valueOf(Order_Year));
			sb.append(",Total_Revenue=" + String.valueOf(Total_Revenue));
			sb.append(",Total_Cost=" + String.valueOf(Total_Cost));
			sb.append(",Total_Price=" + String.valueOf(Total_Price));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT_mini = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT_mini = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String SalesChannel;

		public String getSalesChannel() {
			return this.SalesChannel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public String Order_Date;

		public String getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_Id;

		public Integer getOrder_Id() {
			return this.Order_Id;
		}

		public String Ship_Date;

		public String getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public Integer Order_Year;

		public Integer getOrder_Year() {
			return this.Order_Year;
		}

		public Float Total_Revenue;

		public Float getTotal_Revenue() {
			return this.Total_Revenue;
		}

		public Float Total_Cost;

		public Float getTotal_Cost() {
			return this.Total_Cost;
		}

		public Float Total_Price;

		public Float getTotal_Price() {
			return this.Total_Price;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT_mini.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT_mini.length == 0) {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT_mini, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT_mini, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT_mini.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT_mini.length == 0) {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT_mini, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT_mini, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT_mini) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.SalesChannel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readString(dis);

					this.Order_Id = readInteger(dis);

					this.Ship_Date = readString(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Order_Year = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Total_Revenue = null;
					} else {
						this.Total_Revenue = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Total_Cost = null;
					} else {
						this.Total_Cost = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Total_Price = null;
					} else {
						this.Total_Price = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT_mini) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.SalesChannel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readString(dis);

					this.Order_Id = readInteger(dis);

					this.Ship_Date = readString(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Order_Year = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Total_Revenue = null;
					} else {
						this.Total_Revenue = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Total_Cost = null;
					} else {
						this.Total_Cost = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Total_Price = null;
					} else {
						this.Total_Price = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.SalesChannel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// String

				writeString(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_Id, dos);

				// String

				writeString(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// Integer

				writeInteger(this.Order_Year, dos);

				// Float

				if (this.Total_Revenue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Total_Revenue);
				}

				// Float

				if (this.Total_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Total_Cost);
				}

				// Float

				if (this.Total_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Total_Price);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.SalesChannel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// String

				writeString(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_Id, dos);

				// String

				writeString(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// Integer

				writeInteger(this.Order_Year, dos);

				// Float

				if (this.Total_Revenue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Total_Revenue);
				}

				// Float

				if (this.Total_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Total_Cost);
				}

				// Float

				if (this.Total_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Total_Price);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",SalesChannel=" + SalesChannel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + Order_Date);
			sb.append(",Order_Id=" + String.valueOf(Order_Id));
			sb.append(",Ship_Date=" + Ship_Date);
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Order_Year=" + String.valueOf(Order_Year));
			sb.append(",Total_Revenue=" + String.valueOf(Total_Revenue));
			sb.append(",Total_Cost=" + String.valueOf(Total_Cost));
			sb.append(",Total_Price=" + String.valueOf(Total_Price));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT_mini = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT_mini = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String SalesChannel;

		public String getSalesChannel() {
			return this.SalesChannel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public String Order_Date;

		public String getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_Id;

		public Integer getOrder_Id() {
			return this.Order_Id;
		}

		public String Ship_Date;

		public String getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public Integer Order_Year;

		public Integer getOrder_Year() {
			return this.Order_Year;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT_mini.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT_mini.length == 0) {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT_mini, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT_mini, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT_mini.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT_mini.length == 0) {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT_mini, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT_mini, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT_mini) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.SalesChannel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readString(dis);

					this.Order_Id = readInteger(dis);

					this.Ship_Date = readString(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Order_Year = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT_mini) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.SalesChannel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readString(dis);

					this.Order_Id = readInteger(dis);

					this.Ship_Date = readString(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Order_Year = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.SalesChannel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// String

				writeString(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_Id, dos);

				// String

				writeString(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// Integer

				writeInteger(this.Order_Year, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.SalesChannel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// String

				writeString(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_Id, dos);

				// String

				writeString(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// Integer

				writeInteger(this.Order_Year, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",SalesChannel=" + SalesChannel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + Order_Date);
			sb.append(",Order_Id=" + String.valueOf(Order_Id));
			sb.append(",Ship_Date=" + Ship_Date);
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Order_Year=" + String.valueOf(Order_Year));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT_mini = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT_mini = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String SalesChannel;

		public String getSalesChannel() {
			return this.SalesChannel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public String Order_Date;

		public String getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_Id;

		public Integer getOrder_Id() {
			return this.Order_Id;
		}

		public String Ship_Date;

		public String getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public Integer Order_Year;

		public Integer getOrder_Year() {
			return this.Order_Year;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT_mini.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT_mini.length == 0) {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT_mini, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT_mini, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT_mini.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT_mini.length == 0) {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT_mini, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT_mini, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT_mini) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.SalesChannel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readString(dis);

					this.Order_Id = readInteger(dis);

					this.Ship_Date = readString(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Order_Year = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT_mini) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.SalesChannel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readString(dis);

					this.Order_Id = readInteger(dis);

					this.Ship_Date = readString(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Order_Year = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.SalesChannel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// String

				writeString(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_Id, dos);

				// String

				writeString(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// Integer

				writeInteger(this.Order_Year, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.SalesChannel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// String

				writeString(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_Id, dos);

				// String

				writeString(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// Integer

				writeInteger(this.Order_Year, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",SalesChannel=" + SalesChannel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + Order_Date);
			sb.append(",Order_Id=" + String.valueOf(Order_Id));
			sb.append(",Ship_Date=" + Ship_Date);
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Order_Year=" + String.valueOf(Order_Year));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT_mini = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT_mini = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String SalesChannel;

		public String getSalesChannel() {
			return this.SalesChannel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public String Order_Date;

		public String getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_Id;

		public Integer getOrder_Id() {
			return this.Order_Id;
		}

		public String Ship_Date;

		public String getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public Integer Order_Year;

		public Integer getOrder_Year() {
			return this.Order_Year;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT_mini.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT_mini.length == 0) {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT_mini, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT_mini, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT_mini.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT_mini.length == 0) {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT_mini, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT_mini, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT_mini) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.SalesChannel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readString(dis);

					this.Order_Id = readInteger(dis);

					this.Ship_Date = readString(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Order_Year = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT_mini) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.SalesChannel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readString(dis);

					this.Order_Id = readInteger(dis);

					this.Ship_Date = readString(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Order_Year = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.SalesChannel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// String

				writeString(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_Id, dos);

				// String

				writeString(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// Integer

				writeInteger(this.Order_Year, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.SalesChannel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// String

				writeString(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_Id, dos);

				// String

				writeString(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// Integer

				writeInteger(this.Order_Year, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",SalesChannel=" + SalesChannel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + Order_Date);
			sb.append(",Order_Id=" + String.valueOf(Order_Id));
			sb.append(",Ship_Date=" + Ship_Date);
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Order_Year=" + String.valueOf(Order_Year));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT_mini = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT_mini = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String SalesChannel;

		public String getSalesChannel() {
			return this.SalesChannel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public String Order_Date;

		public String getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_Id;

		public Integer getOrder_Id() {
			return this.Order_Id;
		}

		public String Ship_Date;

		public String getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public Integer Order_Year;

		public Integer getOrder_Year() {
			return this.Order_Year;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT_mini.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT_mini.length == 0) {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT_mini, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT_mini, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT_mini.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT_mini.length == 0) {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT_mini, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT_mini, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT_mini) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.SalesChannel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readString(dis);

					this.Order_Id = readInteger(dis);

					this.Ship_Date = readString(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Order_Year = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT_mini) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.SalesChannel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readString(dis);

					this.Order_Id = readInteger(dis);

					this.Ship_Date = readString(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Order_Year = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.SalesChannel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// String

				writeString(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_Id, dos);

				// String

				writeString(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// Integer

				writeInteger(this.Order_Year, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.SalesChannel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// String

				writeString(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_Id, dos);

				// String

				writeString(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// Integer

				writeInteger(this.Order_Year, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",SalesChannel=" + SalesChannel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + Order_Date);
			sb.append(",Order_Id=" + String.valueOf(Order_Id));
			sb.append(",Ship_Date=" + Ship_Date);
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Order_Year=" + String.valueOf(Order_Year));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT_mini = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT_mini = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String SalesChannel;

		public String getSalesChannel() {
			return this.SalesChannel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public String Order_Date;

		public String getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_Id;

		public Integer getOrder_Id() {
			return this.Order_Id;
		}

		public String Ship_Date;

		public String getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT_mini.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT_mini.length == 0) {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT_mini, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT_mini, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT_mini.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT_mini.length == 0) {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT_mini, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT_mini, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT_mini) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.SalesChannel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readString(dis);

					this.Order_Id = readInteger(dis);

					this.Ship_Date = readString(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT_mini) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.SalesChannel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readString(dis);

					this.Order_Id = readInteger(dis);

					this.Ship_Date = readString(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.SalesChannel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// String

				writeString(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_Id, dos);

				// String

				writeString(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.SalesChannel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// String

				writeString(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_Id, dos);

				// String

				writeString(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",SalesChannel=" + SalesChannel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + Order_Date);
			sb.append(",Order_Id=" + String.valueOf(Order_Id));
			sb.append(",Ship_Date=" + Ship_Date);
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT_mini = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT_mini = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String SalesChannel;

		public String getSalesChannel() {
			return this.SalesChannel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public String Order_Date;

		public String getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_Id;

		public Integer getOrder_Id() {
			return this.Order_Id;
		}

		public String Ship_Date;

		public String getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT_mini.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT_mini.length == 0) {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT_mini, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT_mini, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT_mini.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT_mini.length == 0) {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT_mini, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT_mini, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT_mini) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.SalesChannel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readString(dis);

					this.Order_Id = readInteger(dis);

					this.Ship_Date = readString(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT_mini) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.SalesChannel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readString(dis);

					this.Order_Id = readInteger(dis);

					this.Ship_Date = readString(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.SalesChannel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// String

				writeString(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_Id, dos);

				// String

				writeString(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.SalesChannel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// String

				writeString(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_Id, dos);

				// String

				writeString(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",SalesChannel=" + SalesChannel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + Order_Date);
			sb.append(",Order_Id=" + String.valueOf(Order_Id));
			sb.append(",Ship_Date=" + Ship_Date);
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT_mini = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT_mini = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String SalesChannel;

		public String getSalesChannel() {
			return this.SalesChannel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public String Order_Date;

		public String getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_Id;

		public Integer getOrder_Id() {
			return this.Order_Id;
		}

		public String Ship_Date;

		public String getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT_mini.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT_mini.length == 0) {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT_mini, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT_mini, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT_mini.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT_mini.length == 0) {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT_mini = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT_mini, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT_mini, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT_mini) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.SalesChannel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readString(dis);

					this.Order_Id = readInteger(dis);

					this.Ship_Date = readString(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT_mini) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.SalesChannel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readString(dis);

					this.Order_Id = readInteger(dis);

					this.Ship_Date = readString(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.SalesChannel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// String

				writeString(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_Id, dos);

				// String

				writeString(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.SalesChannel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// String

				writeString(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_Id, dos);

				// String

				writeString(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",SalesChannel=" + SalesChannel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + Order_Date);
			sb.append(",Order_Id=" + String.valueOf(Order_Id));
			sb.append(",Ship_Date=" + Ship_Date);
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				row3Struct row4 = row3;
				row5Struct row5 = new row5Struct();
				out1Struct out1 = new out1Struct();
				row6Struct row6 = new row6Struct();
				row6Struct row7 = row6;
				row6Struct row8 = row6;
				out2Struct out2 = new out2Struct();
				out2Struct row9 = out2;

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(context.target)).getAbsolutePath().replace("\\",
						"/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
							fileName_tFileOutputDelimited_2.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);
				if (filetFileOutputDelimited_2.exists()) {
					throw new RuntimeException("The particular file \"" + filetFileOutputDelimited_2.getAbsoluteFile()
							+ "\" already exist. If you want to overwrite the file, please uncheck the"
							+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */
						","/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
																		 * Start field
																		 * tFileOutputDelimited_2:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false), "ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tLogRow_4 begin ] start
				 */

				ok_Hash.put("tLogRow_4", false);
				start_Hash.put("tLogRow_4", System.currentTimeMillis());

				currentComponent = "tLogRow_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out2");
				}

				int tos_count_tLogRow_4 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_4 = "|";
				java.io.PrintStream consoleOut_tLogRow_4 = null;

				StringBuilder strBuffer_tLogRow_4 = null;
				int nb_line_tLogRow_4 = 0;
///////////////////////    			

				/**
				 * [tLogRow_4 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out2Struct out2_tmp = new out2Struct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(context.stage)).getAbsolutePath().replace("\\",
						"/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				if (filetFileOutputDelimited_1.exists()) {
					throw new RuntimeException("The particular file \"" + filetFileOutputDelimited_1.getAbsoluteFile()
							+ "\" already exist. If you want to overwrite the file, please uncheck the"
							+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						","/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());

				currentComponent = "tLogRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tLogRow_3 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
				java.io.PrintStream consoleOut_tLogRow_3 = null;

				StringBuilder strBuffer_tLogRow_3 = null;
				int nb_line_tLogRow_3 = 0;
///////////////////////    			

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tFilterRow_2 begin ] start
				 */

				ok_Hash.put("tFilterRow_2", false);
				start_Hash.put("tFilterRow_2", System.currentTimeMillis());

				currentComponent = "tFilterRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out1");
				}

				int tos_count_tFilterRow_2 = 0;

				int nb_line_tFilterRow_2 = 0;
				int nb_line_ok_tFilterRow_2 = 0;
				int nb_line_reject_tFilterRow_2 = 0;

				class Operator_tFilterRow_2 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_2(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tLogRow_2 = 0;

				///////////////////////

				class Util_tLogRow_2 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[11];

					public void addRow(String[] row) {

						for (int i = 0; i < 11; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 10 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 10 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[10] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
				util_tLogRow_2.setTableName("tLogRow_2");
				util_tLogRow_2.addRow(new String[] { "Region", "Country", "Item_Type", "SalesChannel", "Order_Priority",
						"Order_Date", "Order_Id", "Ship_Date", "Units_Sold", "Unit_Price", "Unit_Cost", });
				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
///////////////////////    			

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;

				char fieldSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_3 = ((String) ";").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_3 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_3 = /** Start field tFileInputDelimited_3:FILENAME */
						context.source/** End field tFileInputDelimited_3:FILENAME */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;

				try {

					String[] rowtFileInputDelimited_3 = null;
					int currentLinetFileInputDelimited_3 = 0;
					int outputLinetFileInputDelimited_3 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_3 = 0;
							if (footer_value_tFileInputDelimited_3 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_3,
									fieldSeparator_tFileInputDelimited_3[0], "UTF-8");
						} else {
							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									String.valueOf(filename_tFileInputDelimited_3),
									fieldSeparator_tFileInputDelimited_3[0], "UTF-8");
						}

						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
							csvReadertFileInputDelimited_3.setLineEnd("" + rowSeparator_tFileInputDelimited_3[0]);

						csvReadertFileInputDelimited_3.setQuoteChar('\"');

						csvReadertFileInputDelimited_3.setEscapeChar(csvReadertFileInputDelimited_3.getQuoteChar());

						if (footer_tFileInputDelimited_3 > 0) {
							for (totalLinetFileInputDelimited_3 = 0; totalLinetFileInputDelimited_3 < 1; totalLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
							csvReadertFileInputDelimited_3.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_3.readNext()) {

								totalLinetFileInputDelimited_3++;

							}
							int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3
									- footer_tFileInputDelimited_3 < 0 ? 0
											: totalLinetFileInputDelimited_3 - footer_tFileInputDelimited_3;
							if (lastLinetFileInputDelimited_3 > 0) {
								lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3
										? lastLinetFileInputDelimited_3
										: lastLineTemptFileInputDelimited_3;
							} else {
								lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
							}

							csvReadertFileInputDelimited_3.close();
							if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_3,
										fieldSeparator_tFileInputDelimited_3[0], "UTF-8");
							} else {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										String.valueOf(filename_tFileInputDelimited_3),
										fieldSeparator_tFileInputDelimited_3[0], "UTF-8");
							}
							csvReadertFileInputDelimited_3.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
								csvReadertFileInputDelimited_3.setLineEnd("" + rowSeparator_tFileInputDelimited_3[0]);

							csvReadertFileInputDelimited_3.setQuoteChar('\"');

							csvReadertFileInputDelimited_3.setEscapeChar(csvReadertFileInputDelimited_3.getQuoteChar());

						}

						if (limittFileInputDelimited_3 != 0) {
							for (currentLinetFileInputDelimited_3 = 0; currentLinetFileInputDelimited_3 < 1; currentLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
						}
						csvReadertFileInputDelimited_3.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_3 != 0 && csvReadertFileInputDelimited_3 != null
							&& csvReadertFileInputDelimited_3.readNext()) {
						rowstate_tFileInputDelimited_3.reset();

						rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3.getValues();

						currentLinetFileInputDelimited_3++;

						if (lastLinetFileInputDelimited_3 > -1
								&& currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
							break;
						}
						outputLinetFileInputDelimited_3++;
						if (limittFileInputDelimited_3 > 0
								&& outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
							break;
						}

						row3 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row3 = new row3Struct();
						try {

							char fieldSeparator_tFileInputDelimited_3_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ";").length() > 0) {
								fieldSeparator_tFileInputDelimited_3_ListType = ((String) ";").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_3.length == 1 && ("\015").equals(rowtFileInputDelimited_3[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row3.Region = null;

								row3.Country = null;

								row3.Item_Type = null;

								row3.SalesChannel = null;

								row3.Order_Priority = null;

								row3.Order_Date = null;

								row3.Order_Id = null;

								row3.Ship_Date = null;

								row3.Units_Sold = null;

								row3.Unit_Price = null;

								row3.Unit_Cost = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_3 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_3 = 0;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Region = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row3.Region = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 1;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Country = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row3.Country = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 2;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Item_Type = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row3.Item_Type = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 3;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.SalesChannel = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row3.SalesChannel = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 4;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {

											row3.Order_Priority = ParserUtils.parseTo_Character(
													rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);

										} catch (java.lang.Exception ex_tFileInputDelimited_3) {
											globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
													ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Order_Priority", "row3",
															rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
															ex_tFileInputDelimited_3),
													ex_tFileInputDelimited_3));
										}
									} else {

										row3.Order_Priority = null;

									}

								} else {

									row3.Order_Priority = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 5;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Order_Date = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row3.Order_Date = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 6;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {

											row3.Order_Id = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);

										} catch (java.lang.Exception ex_tFileInputDelimited_3) {
											globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
													ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Order_Id", "row3",
															rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
															ex_tFileInputDelimited_3),
													ex_tFileInputDelimited_3));
										}
									} else {

										row3.Order_Id = null;

									}

								} else {

									row3.Order_Id = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 7;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Ship_Date = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row3.Ship_Date = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 8;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {

											row3.Units_Sold = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);

										} catch (java.lang.Exception ex_tFileInputDelimited_3) {
											globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
													ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Units_Sold", "row3",
															rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
															ex_tFileInputDelimited_3),
													ex_tFileInputDelimited_3));
										}
									} else {

										row3.Units_Sold = null;

									}

								} else {

									row3.Units_Sold = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 9;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {

											row3.Unit_Price = ParserUtils.parseTo_Float(
													rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);

										} catch (java.lang.Exception ex_tFileInputDelimited_3) {
											globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
													ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Unit_Price", "row3",
															rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
															ex_tFileInputDelimited_3),
													ex_tFileInputDelimited_3));
										}
									} else {

										row3.Unit_Price = null;

									}

								} else {

									row3.Unit_Price = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 10;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {

											row3.Unit_Cost = ParserUtils.parseTo_Float(
													rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);

										} catch (java.lang.Exception ex_tFileInputDelimited_3) {
											globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
													ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Unit_Cost", "row3",
															rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
															ex_tFileInputDelimited_3),
													ex_tFileInputDelimited_3));
										}
									} else {

										row3.Unit_Cost = null;

									}

								} else {

									row3.Unit_Cost = null;

								}

							}

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row3 = null;

							globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE", e.getMessage());

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tLogRow_2 main ] start
							 */

							currentComponent = "tLogRow_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row3"

								);
							}

///////////////////////		

							String[] row_tLogRow_2 = new String[11];

							if (row3.Region != null) { //
								row_tLogRow_2[0] = String.valueOf(row3.Region);

							} //

							if (row3.Country != null) { //
								row_tLogRow_2[1] = String.valueOf(row3.Country);

							} //

							if (row3.Item_Type != null) { //
								row_tLogRow_2[2] = String.valueOf(row3.Item_Type);

							} //

							if (row3.SalesChannel != null) { //
								row_tLogRow_2[3] = String.valueOf(row3.SalesChannel);

							} //

							if (row3.Order_Priority != null) { //
								row_tLogRow_2[4] = String.valueOf(row3.Order_Priority);

							} //

							if (row3.Order_Date != null) { //
								row_tLogRow_2[5] = String.valueOf(row3.Order_Date);

							} //

							if (row3.Order_Id != null) { //
								row_tLogRow_2[6] = String.valueOf(row3.Order_Id);

							} //

							if (row3.Ship_Date != null) { //
								row_tLogRow_2[7] = String.valueOf(row3.Ship_Date);

							} //

							if (row3.Units_Sold != null) { //
								row_tLogRow_2[8] = String.valueOf(row3.Units_Sold);

							} //

							if (row3.Unit_Price != null) { //
								row_tLogRow_2[9] = FormatterUtils.formatUnwithE(row3.Unit_Price);

							} //

							if (row3.Unit_Cost != null) { //
								row_tLogRow_2[10] = FormatterUtils.formatUnwithE(row3.Unit_Cost);

							} //

							util_tLogRow_2.addRow(row_tLogRow_2);
							nb_line_tLogRow_2++;
//////

//////                    

///////////////////////    			

							row4 = row3;

							tos_count_tLogRow_2++;

							/**
							 * [tLogRow_2 main ] stop
							 */

							/**
							 * [tLogRow_2 process_data_begin ] start
							 */

							currentComponent = "tLogRow_2";

							/**
							 * [tLogRow_2 process_data_begin ] stop
							 */

							/**
							 * [tFilterRow_1 main ] start
							 */

							currentComponent = "tFilterRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row4"

								);
							}

							row5 = null;
							Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
							ope_tFilterRow_1.matches(
									(row4.Order_Id == null ? false
											: row4.Order_Id.compareTo(
													ParserUtils.parseTo_Integer(String.valueOf(99999999))) > 0),
									"Order_Id.compareTo(99999999) > 0 failed");

							ope_tFilterRow_1
									.matches(
											(row4.Order_Id == null ? false
													: row4.Order_Id.compareTo(ParserUtils
															.parseTo_Integer(String.valueOf(1000000000))) < 0),
											"Order_Id.compareTo(1000000000) < 0 failed");

							if (ope_tFilterRow_1.getMatchFlag()) {
								if (row5 == null) {
									row5 = new row5Struct();
								}
								row5.Region = row4.Region;
								row5.Country = row4.Country;
								row5.Item_Type = row4.Item_Type;
								row5.SalesChannel = row4.SalesChannel;
								row5.Order_Priority = row4.Order_Priority;
								row5.Order_Date = row4.Order_Date;
								row5.Order_Id = row4.Order_Id;
								row5.Ship_Date = row4.Ship_Date;
								row5.Units_Sold = row4.Units_Sold;
								row5.Unit_Price = row4.Unit_Price;
								row5.Unit_Cost = row4.Unit_Cost;
								nb_line_ok_tFilterRow_1++;
							} else {
								nb_line_reject_tFilterRow_1++;
							}

							nb_line_tFilterRow_1++;

							tos_count_tFilterRow_1++;

							/**
							 * [tFilterRow_1 main ] stop
							 */

							/**
							 * [tFilterRow_1 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_1";

							/**
							 * [tFilterRow_1 process_data_begin ] stop
							 */
// Start of branch "row5"
							if (row5 != null) {

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row5"

									);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
									// ###############################
									// # Output tables

									out1 = null;

// # Output table : 'out1'
									out1_tmp.Region = row5.Region;
									out1_tmp.Country = row5.Country;
									out1_tmp.Item_Type = row5.Item_Type;
									out1_tmp.SalesChannel = row5.SalesChannel;
									out1_tmp.Order_Priority = row5.Order_Priority;
									out1_tmp.Order_Date = row5.Order_Date;
									out1_tmp.Order_Id = row5.Order_Id;
									out1_tmp.Ship_Date = row5.Ship_Date;
									out1_tmp.Units_Sold = row5.Units_Sold;
									out1_tmp.Unit_Price = row5.Unit_Price;
									out1_tmp.Unit_Cost = row5.Unit_Cost;
									out1_tmp.Order_Year = Mathematical.INT(TalendDate.formatDate("yyyy",
											TalendDate.parseDate("dd/MM/yy", row5.Order_Date)));
									out1 = out1_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */

								/**
								 * [tMap_1 process_data_begin ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_begin ] stop
								 */
// Start of branch "out1"
								if (out1 != null) {

									/**
									 * [tFilterRow_2 main ] start
									 */

									currentComponent = "tFilterRow_2";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "out1"

										);
									}

									row6 = null;
									Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
									ope_tFilterRow_2
											.matches(
													(out1.Order_Year == null ? false
															: out1.Order_Year.compareTo(ParserUtils
																	.parseTo_Integer(String.valueOf(2010))) >= 0),
													"Order_Year.compareTo(2010) >= 0 failed");

									ope_tFilterRow_2
											.matches(
													(out1.Order_Year == null ? false
															: out1.Order_Year.compareTo(ParserUtils
																	.parseTo_Integer(String.valueOf(2019))) <= 0),
													"Order_Year.compareTo(2019) <= 0 failed");

									if (ope_tFilterRow_2.getMatchFlag()) {
										if (row6 == null) {
											row6 = new row6Struct();
										}
										row6.Region = out1.Region;
										row6.Country = out1.Country;
										row6.Item_Type = out1.Item_Type;
										row6.SalesChannel = out1.SalesChannel;
										row6.Order_Priority = out1.Order_Priority;
										row6.Order_Date = out1.Order_Date;
										row6.Order_Id = out1.Order_Id;
										row6.Ship_Date = out1.Ship_Date;
										row6.Units_Sold = out1.Units_Sold;
										row6.Unit_Price = out1.Unit_Price;
										row6.Unit_Cost = out1.Unit_Cost;
										row6.Order_Year = out1.Order_Year;
										nb_line_ok_tFilterRow_2++;
									} else {
										nb_line_reject_tFilterRow_2++;
									}

									nb_line_tFilterRow_2++;

									tos_count_tFilterRow_2++;

									/**
									 * [tFilterRow_2 main ] stop
									 */

									/**
									 * [tFilterRow_2 process_data_begin ] start
									 */

									currentComponent = "tFilterRow_2";

									/**
									 * [tFilterRow_2 process_data_begin ] stop
									 */
// Start of branch "row6"
									if (row6 != null) {

										/**
										 * [tLogRow_3 main ] start
										 */

										currentComponent = "tLogRow_3";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "row6"

											);
										}

///////////////////////		

										strBuffer_tLogRow_3 = new StringBuilder();

										if (row6.Region != null) { //

											strBuffer_tLogRow_3.append(String.valueOf(row6.Region));

										} //

										strBuffer_tLogRow_3.append("|");

										if (row6.Country != null) { //

											strBuffer_tLogRow_3.append(String.valueOf(row6.Country));

										} //

										strBuffer_tLogRow_3.append("|");

										if (row6.Item_Type != null) { //

											strBuffer_tLogRow_3.append(String.valueOf(row6.Item_Type));

										} //

										strBuffer_tLogRow_3.append("|");

										if (row6.SalesChannel != null) { //

											strBuffer_tLogRow_3.append(String.valueOf(row6.SalesChannel));

										} //

										strBuffer_tLogRow_3.append("|");

										if (row6.Order_Priority != null) { //

											strBuffer_tLogRow_3.append(String.valueOf(row6.Order_Priority));

										} //

										strBuffer_tLogRow_3.append("|");

										if (row6.Order_Date != null) { //

											strBuffer_tLogRow_3.append(String.valueOf(row6.Order_Date));

										} //

										strBuffer_tLogRow_3.append("|");

										if (row6.Order_Id != null) { //

											strBuffer_tLogRow_3.append(String.valueOf(row6.Order_Id));

										} //

										strBuffer_tLogRow_3.append("|");

										if (row6.Ship_Date != null) { //

											strBuffer_tLogRow_3.append(String.valueOf(row6.Ship_Date));

										} //

										strBuffer_tLogRow_3.append("|");

										if (row6.Units_Sold != null) { //

											strBuffer_tLogRow_3.append(String.valueOf(row6.Units_Sold));

										} //

										strBuffer_tLogRow_3.append("|");

										if (row6.Unit_Price != null) { //

											strBuffer_tLogRow_3.append(FormatterUtils.formatUnwithE(row6.Unit_Price));

										} //

										strBuffer_tLogRow_3.append("|");

										if (row6.Unit_Cost != null) { //

											strBuffer_tLogRow_3.append(FormatterUtils.formatUnwithE(row6.Unit_Cost));

										} //

										strBuffer_tLogRow_3.append("|");

										if (row6.Order_Year != null) { //

											strBuffer_tLogRow_3.append(String.valueOf(row6.Order_Year));

										} //

										if (globalMap.get("tLogRow_CONSOLE") != null) {
											consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap
													.get("tLogRow_CONSOLE");
										} else {
											consoleOut_tLogRow_3 = new java.io.PrintStream(
													new java.io.BufferedOutputStream(System.out));
											globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_3);
										}
										consoleOut_tLogRow_3.println(strBuffer_tLogRow_3.toString());
										consoleOut_tLogRow_3.flush();
										nb_line_tLogRow_3++;
//////

//////                    

///////////////////////    			

										row7 = row6;

										tos_count_tLogRow_3++;

										/**
										 * [tLogRow_3 main ] stop
										 */

										/**
										 * [tLogRow_3 process_data_begin ] start
										 */

										currentComponent = "tLogRow_3";

										/**
										 * [tLogRow_3 process_data_begin ] stop
										 */

										/**
										 * [tFileOutputDelimited_1 main ] start
										 */

										currentComponent = "tFileOutputDelimited_1";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "row7"

											);
										}

										StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
										if (row7.Region != null) {
											sb_tFileOutputDelimited_1.append(row7.Region);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (row7.Country != null) {
											sb_tFileOutputDelimited_1.append(row7.Country);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (row7.Item_Type != null) {
											sb_tFileOutputDelimited_1.append(row7.Item_Type);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (row7.SalesChannel != null) {
											sb_tFileOutputDelimited_1.append(row7.SalesChannel);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (row7.Order_Priority != null) {
											sb_tFileOutputDelimited_1.append(row7.Order_Priority);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (row7.Order_Date != null) {
											sb_tFileOutputDelimited_1.append(row7.Order_Date);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (row7.Order_Id != null) {
											sb_tFileOutputDelimited_1.append(row7.Order_Id);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (row7.Ship_Date != null) {
											sb_tFileOutputDelimited_1.append(row7.Ship_Date);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (row7.Units_Sold != null) {
											sb_tFileOutputDelimited_1.append(row7.Units_Sold);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (row7.Unit_Price != null) {
											sb_tFileOutputDelimited_1.append(row7.Unit_Price);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (row7.Unit_Cost != null) {
											sb_tFileOutputDelimited_1.append(row7.Unit_Cost);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (row7.Order_Year != null) {
											sb_tFileOutputDelimited_1.append(row7.Order_Year);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

										nb_line_tFileOutputDelimited_1++;
										resourceMap.put("nb_line_tFileOutputDelimited_1",
												nb_line_tFileOutputDelimited_1);

										outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

										row8 = row7;

										tos_count_tFileOutputDelimited_1++;

										/**
										 * [tFileOutputDelimited_1 main ] stop
										 */

										/**
										 * [tFileOutputDelimited_1 process_data_begin ] start
										 */

										currentComponent = "tFileOutputDelimited_1";

										/**
										 * [tFileOutputDelimited_1 process_data_begin ] stop
										 */

										/**
										 * [tMap_2 main ] start
										 */

										currentComponent = "tMap_2";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "row8"

											);
										}

										boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_2 = false;
										boolean mainRowRejected_tMap_2 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
											// ###############################
											// # Output tables

											out2 = null;

// # Output table : 'out2'
											out2_tmp.Region = row8.Region;
											out2_tmp.Country = row8.Country;
											out2_tmp.Item_Type = row8.Item_Type;
											out2_tmp.SalesChannel = row8.SalesChannel;
											out2_tmp.Order_Priority = row8.Order_Priority;
											out2_tmp.Order_Date = row8.Order_Date;
											out2_tmp.Order_Id = row8.Order_Id;
											out2_tmp.Ship_Date = row8.Ship_Date;
											out2_tmp.Units_Sold = row8.Units_Sold;
											out2_tmp.Unit_Price = row8.Unit_Price;
											out2_tmp.Unit_Cost = row8.Unit_Cost;
											out2_tmp.Order_Year = row8.Order_Year;
											out2_tmp.Total_Revenue = row8.Units_Sold * row8.Unit_Price;
											out2_tmp.Total_Cost = row8.Units_Sold * row8.Unit_Cost;
											out2_tmp.Total_Price = row8.Units_Sold * row8.Unit_Price
													- row8.Units_Sold * row8.Unit_Cost;
											out2 = out2_tmp;
// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_2 = false;

										tos_count_tMap_2++;

										/**
										 * [tMap_2 main ] stop
										 */

										/**
										 * [tMap_2 process_data_begin ] start
										 */

										currentComponent = "tMap_2";

										/**
										 * [tMap_2 process_data_begin ] stop
										 */
// Start of branch "out2"
										if (out2 != null) {

											/**
											 * [tLogRow_4 main ] start
											 */

											currentComponent = "tLogRow_4";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1

														, "out2"

												);
											}

///////////////////////		

											strBuffer_tLogRow_4 = new StringBuilder();

											if (out2.Region != null) { //

												strBuffer_tLogRow_4.append(String.valueOf(out2.Region));

											} //

											strBuffer_tLogRow_4.append("|");

											if (out2.Country != null) { //

												strBuffer_tLogRow_4.append(String.valueOf(out2.Country));

											} //

											strBuffer_tLogRow_4.append("|");

											if (out2.Item_Type != null) { //

												strBuffer_tLogRow_4.append(String.valueOf(out2.Item_Type));

											} //

											strBuffer_tLogRow_4.append("|");

											if (out2.SalesChannel != null) { //

												strBuffer_tLogRow_4.append(String.valueOf(out2.SalesChannel));

											} //

											strBuffer_tLogRow_4.append("|");

											if (out2.Order_Priority != null) { //

												strBuffer_tLogRow_4.append(String.valueOf(out2.Order_Priority));

											} //

											strBuffer_tLogRow_4.append("|");

											if (out2.Order_Date != null) { //

												strBuffer_tLogRow_4.append(String.valueOf(out2.Order_Date));

											} //

											strBuffer_tLogRow_4.append("|");

											if (out2.Order_Id != null) { //

												strBuffer_tLogRow_4.append(String.valueOf(out2.Order_Id));

											} //

											strBuffer_tLogRow_4.append("|");

											if (out2.Ship_Date != null) { //

												strBuffer_tLogRow_4.append(String.valueOf(out2.Ship_Date));

											} //

											strBuffer_tLogRow_4.append("|");

											if (out2.Units_Sold != null) { //

												strBuffer_tLogRow_4.append(String.valueOf(out2.Units_Sold));

											} //

											strBuffer_tLogRow_4.append("|");

											if (out2.Unit_Price != null) { //

												strBuffer_tLogRow_4
														.append(FormatterUtils.formatUnwithE(out2.Unit_Price));

											} //

											strBuffer_tLogRow_4.append("|");

											if (out2.Unit_Cost != null) { //

												strBuffer_tLogRow_4
														.append(FormatterUtils.formatUnwithE(out2.Unit_Cost));

											} //

											strBuffer_tLogRow_4.append("|");

											if (out2.Order_Year != null) { //

												strBuffer_tLogRow_4.append(String.valueOf(out2.Order_Year));

											} //

											strBuffer_tLogRow_4.append("|");

											if (out2.Total_Revenue != null) { //

												strBuffer_tLogRow_4
														.append(FormatterUtils.formatUnwithE(out2.Total_Revenue));

											} //

											strBuffer_tLogRow_4.append("|");

											if (out2.Total_Cost != null) { //

												strBuffer_tLogRow_4
														.append(FormatterUtils.formatUnwithE(out2.Total_Cost));

											} //

											strBuffer_tLogRow_4.append("|");

											if (out2.Total_Price != null) { //

												strBuffer_tLogRow_4
														.append(FormatterUtils.formatUnwithE(out2.Total_Price));

											} //

											if (globalMap.get("tLogRow_CONSOLE") != null) {
												consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap
														.get("tLogRow_CONSOLE");
											} else {
												consoleOut_tLogRow_4 = new java.io.PrintStream(
														new java.io.BufferedOutputStream(System.out));
												globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_4);
											}
											consoleOut_tLogRow_4.println(strBuffer_tLogRow_4.toString());
											consoleOut_tLogRow_4.flush();
											nb_line_tLogRow_4++;
//////

//////                    

///////////////////////    			

											row9 = out2;

											tos_count_tLogRow_4++;

											/**
											 * [tLogRow_4 main ] stop
											 */

											/**
											 * [tLogRow_4 process_data_begin ] start
											 */

											currentComponent = "tLogRow_4";

											/**
											 * [tLogRow_4 process_data_begin ] stop
											 */

											/**
											 * [tFileOutputDelimited_2 main ] start
											 */

											currentComponent = "tFileOutputDelimited_2";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1

														, "row9"

												);
											}

											StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
											if (row9.Region != null) {
												sb_tFileOutputDelimited_2.append(row9.Region);
											}
											sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
											if (row9.Country != null) {
												sb_tFileOutputDelimited_2.append(row9.Country);
											}
											sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
											if (row9.Item_Type != null) {
												sb_tFileOutputDelimited_2.append(row9.Item_Type);
											}
											sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
											if (row9.SalesChannel != null) {
												sb_tFileOutputDelimited_2.append(row9.SalesChannel);
											}
											sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
											if (row9.Order_Priority != null) {
												sb_tFileOutputDelimited_2.append(row9.Order_Priority);
											}
											sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
											if (row9.Order_Date != null) {
												sb_tFileOutputDelimited_2.append(row9.Order_Date);
											}
											sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
											if (row9.Order_Id != null) {
												sb_tFileOutputDelimited_2.append(row9.Order_Id);
											}
											sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
											if (row9.Ship_Date != null) {
												sb_tFileOutputDelimited_2.append(row9.Ship_Date);
											}
											sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
											if (row9.Units_Sold != null) {
												sb_tFileOutputDelimited_2.append(row9.Units_Sold);
											}
											sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
											if (row9.Unit_Price != null) {
												sb_tFileOutputDelimited_2.append(row9.Unit_Price);
											}
											sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
											if (row9.Unit_Cost != null) {
												sb_tFileOutputDelimited_2.append(row9.Unit_Cost);
											}
											sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
											if (row9.Order_Year != null) {
												sb_tFileOutputDelimited_2.append(row9.Order_Year);
											}
											sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
											if (row9.Total_Revenue != null) {
												sb_tFileOutputDelimited_2.append(row9.Total_Revenue);
											}
											sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
											if (row9.Total_Cost != null) {
												sb_tFileOutputDelimited_2.append(row9.Total_Cost);
											}
											sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
											if (row9.Total_Price != null) {
												sb_tFileOutputDelimited_2.append(row9.Total_Price);
											}
											sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

											nb_line_tFileOutputDelimited_2++;
											resourceMap.put("nb_line_tFileOutputDelimited_2",
													nb_line_tFileOutputDelimited_2);

											outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

											tos_count_tFileOutputDelimited_2++;

											/**
											 * [tFileOutputDelimited_2 main ] stop
											 */

											/**
											 * [tFileOutputDelimited_2 process_data_begin ] start
											 */

											currentComponent = "tFileOutputDelimited_2";

											/**
											 * [tFileOutputDelimited_2 process_data_begin ] stop
											 */

											/**
											 * [tFileOutputDelimited_2 process_data_end ] start
											 */

											currentComponent = "tFileOutputDelimited_2";

											/**
											 * [tFileOutputDelimited_2 process_data_end ] stop
											 */

											/**
											 * [tLogRow_4 process_data_end ] start
											 */

											currentComponent = "tLogRow_4";

											/**
											 * [tLogRow_4 process_data_end ] stop
											 */

										} // End of branch "out2"

										/**
										 * [tMap_2 process_data_end ] start
										 */

										currentComponent = "tMap_2";

										/**
										 * [tMap_2 process_data_end ] stop
										 */

										/**
										 * [tFileOutputDelimited_1 process_data_end ] start
										 */

										currentComponent = "tFileOutputDelimited_1";

										/**
										 * [tFileOutputDelimited_1 process_data_end ] stop
										 */

										/**
										 * [tLogRow_3 process_data_end ] start
										 */

										currentComponent = "tLogRow_3";

										/**
										 * [tLogRow_3 process_data_end ] stop
										 */

									} // End of branch "row6"

									/**
									 * [tFilterRow_2 process_data_end ] start
									 */

									currentComponent = "tFilterRow_2";

									/**
									 * [tFilterRow_2 process_data_end ] stop
									 */

								} // End of branch "out1"

								/**
								 * [tMap_1 process_data_end ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_end ] stop
								 */

							} // End of branch "row5"

							/**
							 * [tFilterRow_1 process_data_end ] start
							 */

							currentComponent = "tFilterRow_1";

							/**
							 * [tFilterRow_1 process_data_end ] stop
							 */

							/**
							 * [tLogRow_2 process_data_end ] start
							 */

							currentComponent = "tLogRow_2";

							/**
							 * [tLogRow_2 process_data_end ] stop
							 */

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						nb_line_tFileInputDelimited_3++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_3 != null) {
							csvReadertFileInputDelimited_3.close();
						}
					}
					if (csvReadertFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE", nb_line_tFileInputDelimited_3);
					}

				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

//////

				java.io.PrintStream consoleOut_tLogRow_2 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
				}

				consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
				consoleOut_tLogRow_2.flush();
//////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFilterRow_2 end ] start
				 */

				currentComponent = "tFilterRow_2";

				globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out1");
				}

				ok_Hash.put("tFilterRow_2", true);
				end_Hash.put("tFilterRow_2", System.currentTimeMillis());

				/**
				 * [tFilterRow_2 end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

//////
//////
				globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tLogRow_4 end ] start
				 */

				currentComponent = "tLogRow_4";

//////
//////
				globalMap.put("tLogRow_4_NB_LINE", nb_line_tLogRow_4);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out2");
				}

				ok_Hash.put("tLogRow_4", true);
				end_Hash.put("tLogRow_4", System.currentTimeMillis());

				/**
				 * [tLogRow_4 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE", nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFilterRow_2 finally ] start
				 */

				currentComponent = "tFilterRow_2";

				/**
				 * [tFilterRow_2 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tLogRow_4 finally ] start
				 */

				currentComponent = "tLogRow_4";

				/**
				 * [tLogRow_4 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final mini miniClass = new mini();

		int exitCode = miniClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = mini.class.getClassLoader()
					.getResourceAsStream("mini_assignment/mini_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = mini.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("source", "id_String");
					if (context.getStringValue("source") == null) {
						context.source = null;
					} else {
						context.source = (String) context.getProperty("source");
					}
					context.setContextType("stage", "id_String");
					if (context.getStringValue("stage") == null) {
						context.stage = null;
					} else {
						context.stage = (String) context.getProperty("stage");
					}
					context.setContextType("target", "id_String");
					if (context.getStringValue("target") == null) {
						context.target = null;
					} else {
						context.target = (String) context.getProperty("target");
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("source")) {
				context.source = (String) parentContextMap.get("source");
			}
			if (parentContextMap.containsKey("stage")) {
				context.stage = (String) parentContextMap.get("stage");
			}
			if (parentContextMap.containsKey("target")) {
				context.target = (String) parentContextMap.get("target");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : mini");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 257826 characters generated by Talend Open Studio for Data Integration on the
 * May 24, 2022 at 1:21:20 AM IST
 ************************************************************************************************/